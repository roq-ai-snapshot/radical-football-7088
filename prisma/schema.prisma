generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model academy {
  id       String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name     String   @db.VarChar
  owner_id String   @db.Uuid
  user     user     @relation(fields: [owner_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  coach    coach[]
  player   player[]
}

model coach {
  id            String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id       String          @db.Uuid
  academy_id    String          @db.Uuid
  academy       academy         @relation(fields: [academy_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user          user            @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  player        player[]
  training_task training_task[]
}

model communication {
  id                                   String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  sender_id                            String @db.Uuid
  receiver_id                          String @db.Uuid
  message                              String @db.VarChar
  user_communication_receiver_idTouser user   @relation("communication_receiver_idTouser", fields: [receiver_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_communication_sender_idTouser   user   @relation("communication_sender_idTouser", fields: [sender_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model parent {
  id        String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id   String @db.Uuid
  player_id String @db.Uuid
  player    player @relation(fields: [player_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user      user   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model performance_data {
  id        String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  player_id String @db.Uuid
  data      String @db.VarChar
  player    player @relation(fields: [player_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model player {
  id               String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id          String             @db.Uuid
  academy_id       String             @db.Uuid
  coach_id         String             @db.Uuid
  parent           parent[]
  performance_data performance_data[]
  academy          academy            @relation(fields: [academy_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  coach            coach              @relation(fields: [coach_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user             user               @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  training_task    training_task[]
}

model training_task {
  id        String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  player_id String @db.Uuid
  coach_id  String @db.Uuid
  task_name String @db.VarChar
  status    String @db.VarChar
  coach     coach  @relation(fields: [coach_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  player    player @relation(fields: [player_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                                            String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  roq_user_id                                   String          @db.VarChar
  tenant_id                                     String          @db.VarChar
  academy                                       academy[]
  coach                                         coach[]
  communication_communication_receiver_idTouser communication[] @relation("communication_receiver_idTouser")
  communication_communication_sender_idTouser   communication[] @relation("communication_sender_idTouser")
  parent                                        parent[]
  player                                        player[]
}
